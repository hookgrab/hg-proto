/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proto/request.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace hg_proto.request {
    export enum PROTOCOL {
        UNKOWN_PROTOCOL = 0,
        HTTP_1_1 = 1,
        HTTP_2 = 2
    }
    export enum METHOD {
        UNKOWN_METHOD = 0,
        GET = 1,
        POST = 2,
        PUT = 3,
        PATCH = 4,
        DELETE = 5,
        HEAD = 10,
        OPTIONS = 11
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            webhook_uid?: string;
            method?: METHOD;
            url?: string;
            protocol?: PROTOCOL;
            headers?: Request.Header[];
            body?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("webhook_uid" in data && data.webhook_uid != undefined) {
                    this.webhook_uid = data.webhook_uid;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get webhook_uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set webhook_uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 2, METHOD.UNKOWN_METHOD) as METHOD;
        }
        set method(value: METHOD) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 4, PROTOCOL.UNKOWN_PROTOCOL) as PROTOCOL;
        }
        set protocol(value: PROTOCOL) {
            pb_1.Message.setField(this, 4, value);
        }
        get headers() {
            return pb_1.Message.getRepeatedWrapperField(this, Request.Header, 6) as Request.Header[];
        }
        set headers(value: Request.Header[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set body(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            webhook_uid?: string;
            method?: METHOD;
            url?: string;
            protocol?: PROTOCOL;
            headers?: ReturnType<typeof Request.Header.prototype.toObject>[];
            body?: Uint8Array;
        }): Request {
            const message = new Request({});
            if (data.webhook_uid != null) {
                message.webhook_uid = data.webhook_uid;
            }
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.headers != null) {
                message.headers = data.headers.map(item => Request.Header.fromObject(item));
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                webhook_uid?: string;
                method?: METHOD;
                url?: string;
                protocol?: PROTOCOL;
                headers?: ReturnType<typeof Request.Header.prototype.toObject>[];
                body?: Uint8Array;
            } = {};
            if (this.webhook_uid != null) {
                data.webhook_uid = this.webhook_uid;
            }
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.headers != null) {
                data.headers = this.headers.map((item: Request.Header) => item.toObject());
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.webhook_uid.length)
                writer.writeString(1, this.webhook_uid);
            if (this.method != METHOD.UNKOWN_METHOD)
                writer.writeEnum(2, this.method);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (this.protocol != PROTOCOL.UNKOWN_PROTOCOL)
                writer.writeEnum(4, this.protocol);
            if (this.headers.length)
                writer.writeRepeatedMessage(6, this.headers, (item: Request.Header) => item.serialize(writer));
            if (this.body.length)
                writer.writeBytes(7, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.webhook_uid = reader.readString();
                        break;
                    case 2:
                        message.method = reader.readEnum();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 4:
                        message.protocol = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.headers, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Request.Header.deserialize(reader), Request.Header));
                        break;
                    case 7:
                        message.body = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export namespace Request {
        export class Header extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                value?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set value(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                name?: string;
                value?: string;
            }): Header {
                const message = new Header({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    value?: string;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.value.length)
                    writer.writeString(2, this.value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.value = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Header {
                return Header.deserialize(bytes);
            }
        }
    }
}
